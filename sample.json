{
    "swagger": "2.0",
    "info": {
    "title": "SalesLoft Platform",
        "version": "v2",
        "description": "SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts\n",
        "contact": {
        "email": "integrations@salesloft.com"
    }
},
    "tags": [
    {
        "name": "Me",
        "description": "User Information"
    },
    {
        "name": "Team",
        "description": "Team Information"
    },
    {
        "name": "Accounts",
        "description": "Account Management"
    },
    {
        "name": "Account Stages",
        "description": "Account Stage Management"
    },
    {
        "name": "Account Tiers",
        "description": "Account Tier Information"
    },
    {
        "name": "Actions",
        "description": "Actions"
    },
    {
        "name": "Action Details - Call Instructions",
        "description": "Actions - Call Instructions"
    },
    {
        "name": "Activities",
        "description": "Activities"
    },
    {
        "name": "Cadences",
        "description": "Cadence Management"
    },
    {
        "name": "Cadence Memberships",
        "description": "Cadence Membership"
    },
    {
        "name": "Call Data Records",
        "description": "Call Data Record Management"
    },
    {
        "name": "Call Dispositions",
        "description": "Call Dispositions"
    },
    {
        "name": "Calls",
        "description": "Call Management"
    },
    {
        "name": "Call Sentiments",
        "description": "Call Sentiments"
    },
    {
        "name": "Caller IDs",
        "description": "Caller ID Information"
    },
    {
        "name": "CRM Activity Fields",
        "description": "CRM Activity Fields"
    },
    {
        "name": "CRM Activities",
        "description": "CRM Activity Management"
    },
    {
        "name": "Custom Fields",
        "description": "Custom Field Management"
    },
    {
        "name": "Emails",
        "description": "Email Management"
    },
    {
        "name": "Email Template Attachments",
        "description": "Email Template Attachments"
    },
    {
        "name": "Email Templates",
        "description": "Email Templates Management"
    },
    {
        "name": "Imports",
        "description": "Import Management"
    },
    {
        "name": "Live Website Tracking Parameters",
        "description": "Live Website Tracking Parameters"
    },
    {
        "name": "Notes",
        "description": "Note Management"
    },
    {
        "name": "Ongoing Actions",
        "description": "Ongoing Actions"
    },
    {
        "name": "People",
        "description": "Person Management"
    },
    {
        "name": "Person Stages",
        "description": "Person Stage Management"
    },
    {
        "name": "Phone Number Assignments",
        "description": "Phone Number Assignments"
    },
    {
        "name": "Recording Settings",
        "description": "Recording Settings Information"
    },
    {
        "name": "Saved List Views",
        "description": "Saved List Views"
    },
    {
        "name": "Steps",
        "description": "Steps"
    },
    {
        "name": "Successes",
        "description": "Success Management"
    },
    {
        "name": "Tags",
        "description": "Tags"
    },
    {
        "name": "Team Template Attachments",
        "description": "Team Template Attachments"
    },
    {
        "name": "Team Templates",
        "description": "Team Template Management"
    },
    {
        "name": "Users",
        "description": "User Management"
    }
],
    "paths": {
    "/v2/me.json": {
        "get": {
            "tags": [
                "Me"
            ],
                "summary": "Fetch current user",
                "description": "Authenticated user information. This endpoint does not accept any parameters as it is\nrepresents your authenticated user. The \"Users\" resource provides user information\nfor other users on the team.\n",
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    },
    "/v2/team.json": {
        "get": {
            "tags": [
                "Team"
            ],
                "summary": "Fetch current team",
                "description": "Fetches the team of the authenticated user.\n",
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Team"
                    }
                }
            }
        }
    },
    "/v2/accounts.json": {
        "get": {
            "tags": [
                "Accounts"
            ],
                "summary": "List accounts",
                "description": "Fetches multiple account records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of accounts to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters accounts by crm_id. Multiple crm ids can be applied",
                    "name": "crm_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters accounts by the tags applied to the account. Multiple tags can be applied",
                    "name": "tag",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Domain of the accounts to fetch. Domains are unique and lowercase",
                    "name": "domain",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \"true\" or \"false\" is passed.",
                    "name": "archived",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched.",
                    "name": "name",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters accounts by account_stage_id. Multiple account_stage_ids can be applied",
                    "name": "account_stage_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_tier. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Accounts"
            ],
                "summary": "Create an account",
                "description": "Creates an account.\n\n\"domain\" must be unique on the current team.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Account Full Name",
                    "name": "name",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Website domain, not a fully qualified URI",
                    "name": "domain",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Conversational name of the Account",
                    "name": "conversational_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Description",
                    "name": "description",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone number without formatting",
                    "name": "phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Website",
                    "name": "website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Full LinkedIn url",
                    "name": "linkedin_url",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Twitter handle, with @",
                    "name": "twitter_handle",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Street name and number",
                    "name": "street",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "City",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "State",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Postal code",
                    "name": "postal_code",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Country",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Time locale",
                    "name": "locale",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Industry",
                    "name": "industry",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Type of the Account's company",
                    "name": "company_type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Date or year of founding",
                    "name": "founded",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Estimated revenue range",
                    "name": "revenue_range",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Estimated number of people in employment",
                    "name": "size",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications",
                    "name": "do_not_contact",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "name": "custom_fields",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "All tags applied to this Account",
                    "name": "tags",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "ID of the User that owns this Account",
                    "name": "owner_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the CompanyStage assigned to this Account",
                    "name": "company_stage_id",
                    "required": false,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Account"
                    }
                }
            }
        }
    },
    "/v2/accounts/{id}.json": {
        "get": {
            "tags": [
                "Accounts"
            ],
                "summary": "Fetch an account",
                "description": "Fetches an account, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Account ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Account"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "Accounts"
            ],
                "summary": "Update an existing Account",
                "description": "Updates an account.\n\n\"domain\" must be unique on the current team.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Account Full Name",
                    "name": "name",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Website domain, not a fully qualified URI",
                    "name": "domain",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Conversational name of the Account",
                    "name": "conversational_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Description",
                    "name": "description",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone number without formatting",
                    "name": "phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Website",
                    "name": "website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Full LinkedIn url",
                    "name": "linkedin_url",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Twitter handle, with @",
                    "name": "twitter_handle",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Street name and number",
                    "name": "street",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "City",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "State",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Postal code",
                    "name": "postal_code",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Country",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Time locale",
                    "name": "locale",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Industry",
                    "name": "industry",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Type of the Account's company",
                    "name": "company_type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Date or year of founding",
                    "name": "founded",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Estimated revenue range",
                    "name": "revenue_range",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Estimated number of people in employment",
                    "name": "size",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications",
                    "name": "do_not_contact",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "name": "custom_fields",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "All tags applied to this Account",
                    "name": "tags",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "ID of the User that owns this Account",
                    "name": "owner_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the CompanyStage assigned to this Account",
                    "name": "company_stage_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "path",
                    "description": "Account ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it's not already set. Setting this to false will set archived_at to null",
                    "name": "archived",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Account"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Accounts"
            ],
                "summary": "Delete an account",
                "description": "Deletes an account. This operation is not reversible without contacting support.\nThis operation can be called multiple times successfully.\n\nDeleting an account will remove all connected people from that account.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Account ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The Account has been deleted successfully"
                }
            }
        }
    },
    "/v2/account_stages.json": {
        "get": {
            "tags": [
                "Account Stages"
            ],
                "summary": "List account stages",
                "description": "Fetches multiple account stage records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of account stages to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/AccountStage"
                        }
                    }
                }
            }
        }
    },
    "/v2/account_stages/{id}.json": {
        "get": {
            "tags": [
                "Account Stages"
            ],
                "summary": "Fetch an account stage",
                "description": "Fetches an account stage, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Account Stage ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/AccountStage"
                    }
                }
            }
        }
    },
    "/v2/account_tiers.json": {
        "get": {
            "tags": [
                "Account Tiers"
            ],
                "summary": "List Account Tiers",
                "description": "Fetches multiple account tier records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of Account Tiers to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters Account Tiers by name. Multiple names can be applied",
                    "name": "name",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, order. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/AccountTier"
                        }
                    }
                }
            }
        }
    },
    "/v2/account_tiers/{id}.json": {
        "get": {
            "tags": [
                "Account Tiers"
            ],
                "summary": "Fetch an account tier",
                "description": "Fetches an account tier, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Account Tier ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/AccountTier"
                    }
                }
            }
        }
    },
    "/v2/actions.json": {
        "get": {
            "tags": [
                "Actions"
            ],
                "summary": "List actions",
                "description": "Fetches multiple action records. The records can be filtered, paged, and sorted according to\nthe respective parameters. Only actions that are currently \"in_progess\" will be returned by\nthis endpoint.\n\nBy default, only the requesting user's actions will be returned by this endpoint. It is possible\nfor team admin users to request other users' actions by passing the user_guid parameter.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of actions to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Fetch actions by step ID",
                    "name": "step_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Filter actions by type",
                    "name": "type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the due_on field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "due_on",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters actions by the user's guid. Multiple user guids can be applied. The user must be a team admin to filter other users' actions",
                    "name": "user_guid",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters actions by person_id. Multiple person ids can be applied",
                    "name": "person_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Action"
                        }
                    }
                }
            }
        }
    },
    "/v2/actions/{id}.json": {
        "get": {
            "tags": [
                "Actions"
            ],
                "summary": "Fetch an action",
                "description": "Fetches an action, by ID only.\nThis endpoint will only return actions that are in_progress or pending_activity.\nOnce an action is complete, the request for that action will return a 404 status code.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Action ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Action"
                    }
                }
            }
        }
    },
    "/v2/action_details/call_instructions.json": {
        "get": {
            "tags": [
                "Action Details - Call Instructions"
            ],
                "summary": "List call instructions",
                "description": "Fetches multiple call instruction records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of call instructions to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CallInstruction"
                        }
                    }
                }
            }
        }
    },
    "/v2/action_details/call_instructions/{id}.json": {
        "get": {
            "tags": [
                "Action Details - Call Instructions"
            ],
                "summary": "Fetch a call instructions",
                "description": "Fetches a call instruction, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Call instructions ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CallInstruction"
                    }
                }
            }
        }
    },
    "/v2/activities.json": {
        "post": {
            "tags": [
                "Activities"
            ],
                "summary": "Create an activity",
                "description": "Creates an activity. An activity will mark the associated action as completed. Currently,\nonly certain action types can have an activity explicitly created for them.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Action that is being completed. This will validate that the action is still\nvalid before completed it. The same action can never be successfully passed twice to this endpoint.\nThe action must have a type of 'integration'.\n",
                    "name": "action_id",
                    "required": false,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Activity"
                    }
                }
            }
        }
    },
    "/v2/cadences.json": {
        "get": {
            "tags": [
                "Cadences"
            ],
                "summary": "List cadences",
                "description": "Fetches multiple cadence records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of cadences to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters cadences by whether they are a team cadence or not",
                    "name": "team_cadence",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters cadences by whether they are shared",
                    "name": "shared",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters cadences by the owner's guid. Multiple owner guids can be applied",
                    "name": "owned_by_guid",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters cadences by whether they are able to have people added to them",
                    "name": "people_addable",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Cadence"
                        }
                    }
                }
            }
        }
    },
    "/v2/cadences/{id}.json": {
        "get": {
            "tags": [
                "Cadences"
            ],
                "summary": "Fetch a cadence",
                "description": "Fetches a cadence, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Cadence ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Cadence"
                    }
                }
            }
        }
    },
    "/v2/cadence_memberships.json": {
        "get": {
            "tags": [
                "Cadence Memberships"
            ],
                "summary": "List cadence memberships",
                "description": "Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to\nthe respective parameters. A cadence membership is the association between a person and their current and\nhistorical time on a cadence. Cadence membership records are mutable and change over time. If a person is\nadded to a cadence and re-added to the same cadence in the future, there is a single membership record.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of cadence memberships to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "ID of the person to find cadence memberships for",
                    "name": "person_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "ID of the cadence to find cadence memberships for",
                    "name": "cadence_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "If true, return only cadence memberships for people currently on cadences.  If false, return cadence memberships for people who have been removed from or have completed a cadence.",
                    "name": "currently_on_cadence",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: added_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CadenceMembership"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Cadence Memberships"
            ],
                "summary": "Create a cadence membership",
                "description": "Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will\ndefault to the authenticated user, but can be set to any visible user on the authenticated team.\n\nA person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, or the cadence is owned by\nthe teammate.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "ID of the person to create a cadence membership for",
                    "name": "person_id",
                    "required": true,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "ID of the cadence to create a cadence membership for",
                    "name": "cadence_id",
                    "required": true,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "ID of the user to create a cadence membership for. The associated cadence must be owned by the user, or it must be a team cadence",
                    "name": "user_id",
                    "required": false,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CadenceMembership"
                    }
                }
            }
        }
    },
    "/v2/cadence_memberships/{id}.json": {
        "get": {
            "tags": [
                "Cadence Memberships"
            ],
                "summary": "Fetch a cadence membership",
                "description": "Fetches a cadence membership, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "CadenceMembership ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CadenceMembership"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Cadence Memberships"
            ],
                "summary": "Delete a cadence membership",
                "parameters": [
                {
                    "in": "path",
                    "description": "CadenceMembership ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The person has been removed from the cadence successfully"
                }
            }
        }
    },
    "/v2/call_data_records.json": {
        "get": {
            "tags": [
                "Call Data Records"
            ],
                "summary": "List call data records",
                "description": "Fetches multiple call data records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n\nCall data records are records of all inbound and outbound calls through SalesLoft. A call data record may\nbe associated with a call, but does not have to be.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of call data records to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Return only call data records which have or do not have a call logged for them",
                    "name": "has_call",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "created_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters list to only include guids",
                    "name": "user_guid",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CallDataRecord"
                        }
                    }
                }
            }
        }
    },
    "/v2/call_data_records/{id}.json": {
        "get": {
            "tags": [
                "Call Data Records"
            ],
                "summary": "Fetch a call data record",
                "description": "Fetches a call data record, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "CallDataRecord ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CallDataRecord"
                    }
                }
            }
        }
    },
    "/v2/call_dispositions.json": {
        "get": {
            "tags": [
                "Call Dispositions"
            ],
                "summary": "List call dispositions",
                "description": "Fetches multiple call disposition records. The records can be sorted according to\nthe respective parameters. Call dispositions must be configured in application. This will\nchange in the future, but please contact us if you have a pressing use case.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: name, updated_at. Defaults to name",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CallDisposition"
                        }
                    }
                }
            }
        }
    },
    "/v2/activities/calls.json": {
        "get": {
            "tags": [
                "Calls"
            ],
                "summary": "List calls",
                "description": "Fetches multiple call records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of calls to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Call"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Calls"
            ],
                "summary": "Create a call",
                "description": "Creates a call. The parameters of this endpoint can be used to create an action\nand ensure that the CRM Task is mapped correctly.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The ID of the person whom this call will be logged for",
                    "name": "person_id",
                    "required": true,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "The phone number that was called",
                    "name": "to",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The length of the call, in seconds",
                    "name": "duration",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list.",
                    "name": "disposition",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list.",
                    "name": "sentiment",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user's CRM",
                    "name": "notes",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user's guid",
                    "name": "user_guid",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Action that this call is being logged for. This will validate that the action is still\nvalid before completing it. The same action can never be successfully passed twice to this endpoint. The\naction must have a type of 'phone'.\n",
                    "name": "action_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "CRM specific parameters. Some parameters are required on a per-team basis. Consume the\nCrmActivityFields endpoint to receive a list of valid parameters. The \"field\" property\nis passed as the key of this object, and the value of this object is the value that you\nwould like to set.\n\nIf CrmActivityField has a non-null value, then that value must be submitted, or excluded\nfrom API calls, as these values are automatically applied.\n",
                    "name": "crm_params",
                    "required": false,
                    "type": "object"
                },
                {
                    "in": "formData",
                    "description": "CallDataRecord associations that will become linked to the created call. It is possible to pass\nmultiple CallDataRecord ids in this field; this can be used to represent multiple phone calls\nthat made up a single call.\n\nAny call data record that is used must not already be linked to a call. It is not possible\nto link a call data record to multiple calls, and it is not possible to re-assign a call data\nrecord to a different call.\n",
                    "name": "linked_call_data_record_ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Call"
                    }
                }
            }
        }
    },
    "/v2/activities/calls/{id}.json": {
        "get": {
            "tags": [
                "Calls"
            ],
                "summary": "Fetch a call",
                "description": "Fetches a call, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Call ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Call"
                    }
                }
            }
        }
    },
    "/v2/call_sentiments.json": {
        "get": {
            "tags": [
                "Call Sentiments"
            ],
                "summary": "List call sentiments",
                "description": "Fetches multiple call sentiment records. The records can be sorted according to\nthe respective parameters. Call sentiments must be configured in application. This will\nchange in the future, but please contact us if you have a pressing use case.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: name, updated_at. Defaults to name",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CallDisposition"
                        }
                    }
                }
            }
        }
    },
    "/v2/phone_numbers/caller_ids.json": {
        "get": {
            "tags": [
                "Caller IDs"
            ],
                "summary": "List caller ids",
                "description": "Each entry is a possible caller ID match for the number. Multiple\nentries may be returned if the phone number is present on more than one\nperson in the system.  Phone number should be in E.164 format.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "E.164 Phone Number",
                    "name": "phone_number",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CallerId"
                        }
                    }
                }
            }
        }
    },
    "/v2/crm_activity_fields.json": {
        "get": {
            "tags": [
                "CRM Activity Fields"
            ],
                "summary": "List crm activity fields",
                "description": "Fetches multiple crm activity field records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Return only records with this source",
                    "name": "source",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: title, updated_at. Defaults to title",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CrmActivityField"
                        }
                    }
                }
            }
        }
    },
    "/v2/crm_activities.json": {
        "get": {
            "tags": [
                "CRM Activities"
            ],
                "summary": "List crm activities",
                "description": "Fetches multiple crm activity records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of crm activities to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CrmActivity"
                        }
                    }
                }
            }
        }
    },
    "/v2/crm_activities/{id}.json": {
        "get": {
            "tags": [
                "CRM Activities"
            ],
                "summary": "Fetch a crm activity",
                "description": "Fetches a crm activity, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Crm activity ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CrmActivity"
                    }
                }
            }
        }
    },
    "/v2/custom_fields.json": {
        "get": {
            "tags": [
                "Custom Fields"
            ],
                "summary": "List custom fields",
                "description": "Fetches multiple custom field records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of custom fields to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Type of field to fetch. Value must be one of: person, company, opportunity",
                    "name": "field_type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/CustomField"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Custom Fields"
            ],
                "summary": "Create a custom field",
                "description": "Creates a custom field.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The name of the custom field",
                    "name": "name",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The field type of the custom field. Value must be one of: person, company, opportunity",
                    "name": "field_type",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CustomField"
                    }
                }
            }
        }
    },
    "/v2/custom_fields/{id}.json": {
        "get": {
            "tags": [
                "Custom Fields"
            ],
                "summary": "Fetch a custom field",
                "description": "Fetches a custom field, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Custom Field ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CustomField"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "Custom Fields"
            ],
                "summary": "Update a custom field",
                "description": "Update a custom field.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Custom Field ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The name of the custom field",
                    "name": "name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The field type of the custom field. Value must be one of: person, company, opportunity",
                    "name": "field_type",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/CustomField"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Custom Fields"
            ],
                "summary": "Delete a custom field",
                "description": "Deletes a custom field.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Custom Field ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The Custom Field has been deleted successfully"
                }
            }
        }
    },
    "/v2/activities/emails.json": {
        "get": {
            "tags": [
                "Emails"
            ],
                "summary": "List emails",
                "description": "Fetches multiple email records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters emails by whether they have bounced or not",
                    "name": "bounced",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters emails by crm_activity_id. Multiple crm activty ids can be applied",
                    "name": "crm_activity_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters emails by action_id. Multiple action ids can be applied",
                    "name": "action_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Email"
                        }
                    }
                }
            }
        }
    },
    "/v2/activities/emails/{id}.json": {
        "get": {
            "tags": [
                "Emails"
            ],
                "summary": "Fetch an email",
                "description": "Fetches an email, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Email ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Email"
                    }
                }
            }
        }
    },
    "/v2/email_template_attachments.json": {
        "get": {
            "tags": [
                "Email Template Attachments"
            ],
                "summary": "List email template attachments",
                "description": "Fetches multiple email template attachment records. The records can be filtered and paged according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of email template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email template attachments by email template IDs",
                    "name": "email_template_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/EmailTemplateAttachment"
                        }
                    }
                }
            }
        }
    },
    "/v2/email_templates.json": {
        "get": {
            "tags": [
                "Email Templates"
            ],
                "summary": "List email templates",
                "description": "Fetches multiple email template records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of email templates to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates by whether they are linked to a team template or not",
                    "name": "linked_to_team_template",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters email templates by title or subject",
                    "name": "search",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs",
                    "name": "tag_ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates by tags applied to the template, not to exceed 100 tags",
                    "name": "tag",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates by current authenticated user",
                    "name": "filter_by_owner",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters email templates by groups applied to the template by group ID. Not to exceed 500 IDs. Returns templates that are assigned to any of the group ids.",
                    "name": "group_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates based on whether or not the template has been used on a cadence",
                    "name": "include_cadence_templates",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters email templates to include archived templates or not",
                    "name": "include_archived_templates",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/EmailTemplate"
                        }
                    }
                }
            }
        }
    },
    "/v2/email_templates/{id}.json": {
        "get": {
            "tags": [
                "Email Templates"
            ],
                "summary": "Fetch an email template",
                "description": "Fetches an email template, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "EmailTemplate ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Optionally will return the templates with the current user's email signature",
                    "name": "include_signature",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/EmailTemplate"
                    }
                }
            }
        }
    },
    "/v2/imports.json": {
        "get": {
            "tags": [
                "Imports"
            ],
                "summary": "List imports",
                "description": "Fetches multiple imports.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of imports to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "ID of users to fetch imports for. Using this filter will return an empty array for non-admin users who request other user's imports",
                    "name": "user_ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to created_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Import"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Imports"
            ],
                "summary": "Create an import",
                "description": "Creates an import.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "ID of the User that owns this Import",
                    "name": "user_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "Name, recommended to be easily identifiable to a user",
                    "name": "name",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Import"
                    }
                }
            }
        }
    },
    "/v2/imports/{id}.json": {
        "get": {
            "tags": [
                "Imports"
            ],
                "summary": "Fetch an import",
                "description": "Fetches an import, by ID only.\n\nAdmin users can access imports for the entire team, but non-admin users can only access their own imports.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Import ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Import"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "Imports"
            ],
                "summary": "Update an import",
                "description": "Updates an import, by ID only.\n\nAdmin users can access imports for the entire team, but non-admin users can only access their own imports.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Import ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "ID of the User that owns this Import",
                    "name": "user_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "Name, recommended to be easily identifiable to a user",
                    "name": "name",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Import"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Imports"
            ],
                "summary": "Delete an import",
                "description": "Deletes an import, by ID only. The associated people can be deleted as part of the deletion process.\n\nAdmin users can access imports for the entire team, but non-admin users can only access their own imports.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Import ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Whether to delete people on this Import. Possible values are: [not present], all, single.\n\n'single' will delete people who are only present in this Import.\n'all' will delete people even if they are present in other Imports.\nNot specifying this parameter will not delete any people\n",
                    "name": "undo",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The import has been deleted successfully"
                }
            }
        }
    },
    "/v2/live_website_tracking_parameters.json": {
        "post": {
            "tags": [
                "Live Website Tracking Parameters"
            ],
                "summary": "Create an Live Website Tracking Parameter",
                "description": "Creates a Live Website Tracking parameter to identify a person\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The person to create the LiveWebsiteTrackingParameter for",
                    "name": "person_id",
                    "required": true,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/LiveWebsiteTrackingParameter"
                    }
                }
            }
        }
    },
    "/v2/notes.json": {
        "get": {
            "tags": [
                "Notes"
            ],
                "summary": "List notes",
                "description": "Fetches multiple note records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Case insensitive type of item with which the note is associated.  Value must be one of: person, account",
                    "name": "associated_with_type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used",
                    "name": "associated_with_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "IDs of notes to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Notes"
            ],
                "summary": "Create a note",
                "description": "Creates a note.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The content of the note",
                    "name": "content",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Case insensitive type of item with which the note is associated.  Value must be one of: person, account",
                    "name": "associated_with_type",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "ID of the item with which the note is associated",
                    "name": "associated_with_id",
                    "required": true,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true",
                    "name": "skip_crm_sync",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "ID of the call with which the note is associated. The call cannot already have a note",
                    "name": "call_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "The subject of the note's crm activity, defaults to 'Note'",
                    "name": "subject",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user",
                    "name": "user_guid",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Note"
                    }
                }
            }
        }
    },
    "/v2/notes/{id}.json": {
        "get": {
            "tags": [
                "Notes"
            ],
                "summary": "Fetch a note",
                "description": "Fetches a note, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Note ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Note"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "Notes"
            ],
                "summary": "Update a note",
                "description": "Updates a note. Any changes to the note or associated records will not reflect in Salesforce.com.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Note ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The content of the note",
                    "name": "content",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call",
                    "name": "call_id",
                    "required": false,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Person"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Notes"
            ],
                "summary": "Delete a note",
                "description": "Deletes a note owned by authorized account.\nThis operation is not reversible without contacting support.\nThis operation can be called multiple times successfully.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Note ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The Note has been deleted successfully"
                }
            }
        }
    },
    "/v2/ongoing_actions.json": {
        "post": {
            "tags": [
                "Ongoing Actions"
            ],
                "summary": "Create an ongoing action",
                "description": "Creates an ongoing action. An ongoing action is an action that is not yet completed,\nbut progress has been made towards the completion. The user should not need to do\nanything for an ongoing action to be completed. An ongoing action can be later completed\nby creating an activity.\n\nOngoing actions are marked as status=pending_activity.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Action that is being marked ongoing. This will validate that the action is still\nvalid before modifying it. Ongoing actions can not be marked ongoing.\n",
                    "name": "action_id",
                    "required": false,
                    "type": "integer"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Action"
                    }
                }
            }
        }
    },
    "/v2/people.json": {
        "get": {
            "tags": [
                "People"
            ],
                "summary": "List people",
                "description": "Fetches multiple person records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of people to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters people by email address. Multiple emails can be applied",
                    "name": "email_addresses",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters people by the owner's guid. Multiple owner guids can be applied",
                    "name": "owned_by_guid",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Includes people that have a given person_stage. Multiple person stage ids can be applied",
                    "name": "person_stage_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters people by crm_id. Multiple crm ids can be applied",
                    "name": "crm_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Includes people that have a given do_not_contact property",
                    "name": "do_not_contact",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Includes people that can be emailed given do_not_contact and contact_restrictions property",
                    "name": "can_email",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Includes people that can be called given do_not_contact and contact_restrictions property",
                    "name": "can_call",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Filters people by the account they are linked to. Multiple account ids can be applied",
                    "name": "account_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, last_contacted_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "People"
            ],
                "summary": "Create a person",
                "description": "Creates a person. Either email_address or phone/last_name must be provided as a unique lookup\non the team.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Email address",
                    "name": "email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Alternate email address",
                    "name": "secondary_email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Personal email address",
                    "name": "personal_email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "First name",
                    "name": "first_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Last name",
                    "name": "last_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone without formatting",
                    "name": "phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone extension without formatting",
                    "name": "phone_extension",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Mobile phone without formatting",
                    "name": "mobile_phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Home phone without formatting",
                    "name": "home_phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Linkedin URL",
                    "name": "linkedin_url",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Job title",
                    "name": "title",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "City",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "State",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Country",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - city",
                    "name": "work_city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - state",
                    "name": "work_state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - country",
                    "name": "work_country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_industry",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown",
                    "name": "job_seniority",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.",
                    "name": "do_not_contact",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "Time locale of the person",
                    "name": "locale",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The website of this person",
                    "name": "personal_website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The twitter handle of this person",
                    "name": "twitter_handle",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "All tags applied to this person",
                    "name": "tags",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message",
                    "name": "contact_restrictions",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "name": "custom_fields",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "ID of the Account to link this person to",
                    "name": "account_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the User that owns this person",
                    "name": "owner_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import",
                    "name": "import_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the PersonStage of this person",
                    "name": "person_stage_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format.",
                    "name": "autotag_date",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Person"
                    }
                }
            }
        }
    },
    "/v2/people/{id}.json": {
        "get": {
            "tags": [
                "People"
            ],
                "summary": "Fetch a person",
                "description": "Fetches a person, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Person ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Person"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "People"
            ],
                "summary": "Update a person",
                "description": "Updates a person.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "Email address",
                    "name": "email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Alternate email address",
                    "name": "secondary_email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Personal email address",
                    "name": "personal_email_address",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "First name",
                    "name": "first_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Last name",
                    "name": "last_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone without formatting",
                    "name": "phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Phone extension without formatting",
                    "name": "phone_extension",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Mobile phone without formatting",
                    "name": "mobile_phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Home phone without formatting",
                    "name": "home_phone",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Linkedin URL",
                    "name": "linkedin_url",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Job title",
                    "name": "title",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "City",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "State",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Country",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - city",
                    "name": "work_city",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - state",
                    "name": "work_state",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Work location - country",
                    "name": "work_country",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "name": "person_company_industry",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown",
                    "name": "job_seniority",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.",
                    "name": "do_not_contact",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "Time locale of the person",
                    "name": "locale",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The website of this person",
                    "name": "personal_website",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The twitter handle of this person",
                    "name": "twitter_handle",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "All tags applied to this person",
                    "name": "tags",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message",
                    "name": "contact_restrictions",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "name": "custom_fields",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "formData",
                    "description": "ID of the Account to link this person to",
                    "name": "account_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the User that owns this person",
                    "name": "owner_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import",
                    "name": "import_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "formData",
                    "description": "ID of the PersonStage of this person",
                    "name": "person_stage_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "path",
                    "description": "Person id",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Person"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "People"
            ],
                "summary": "Delete a person",
                "description": "Deletes a person. This operation is not reversible without contacting support.\nThis operation can be called multiple times successfully.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Person id",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The person has been deleted successfully"
                }
            }
        }
    },
    "/v2/person_stages.json": {
        "get": {
            "tags": [
                "Person Stages"
            ],
                "summary": "List person stages",
                "description": "Fetches multiple person stage records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of person stages to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/PersonStage"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Person Stages"
            ],
                "summary": "Create a person stage",
                "description": "Creates a person stage.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The name of the new stage",
                    "name": "name",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/PersonStage"
                    }
                }
            }
        }
    },
    "/v2/person_stages/{id}.json": {
        "get": {
            "tags": [
                "Person Stages"
            ],
                "summary": "Fetch a person stage",
                "description": "Fetches a person stage, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Stage ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/PersonStage"
                    }
                }
            }
        },
        "put": {
            "tags": [
                "Person Stages"
            ],
                "summary": "Update a person stage",
                "description": "Updates a person stage.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Stage ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The name of the stage.",
                    "name": "name",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/PersonStage"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Person Stages"
            ],
                "summary": "Delete an person stage",
                "description": "Deletes a person stage. This operation is not reversible without contacting support.\nThis operation can be called multiple times successfully.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Stage ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The Person Stage has been deleted successfully"
                }
            }
        }
    },
    "/v2/phone_number_assignments.json": {
        "get": {
            "tags": [
                "Phone Number Assignments"
            ],
                "summary": "List phone number assignments",
                "description": "Fetches multiple phone number assignment records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of phone number assignments to fetch",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/PhoneNumberAssignment"
                        }
                    }
                }
            }
        }
    },
    "/v2/phone_number_assignments/{id}.json": {
        "get": {
            "tags": [
                "Phone Number Assignments"
            ],
                "summary": "Fetch a phone number assignment",
                "description": "Fetches a phone number assignment, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "PhoneNumberAssignment ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/PhoneNumberAssignment"
                    }
                }
            }
        }
    },
    "/v2/phone_numbers/recording_settings/{id}.json": {
        "get": {
            "tags": [
                "Recording Settings"
            ],
                "summary": "Fetch recording setting",
                "description": "Fetches the recording status for a given phone number, based on Do Not Record and Recording Governance for your team.\nPhone number should be in E.164 format.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "E.164 Phone Number",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/RecordingSetting"
                    }
                }
            }
        }
    },
    "/v2/saved_list_views.json": {
        "get": {
            "tags": [
                "Saved List Views"
            ],
                "summary": "List saved list views",
                "description": "Fetches multiple saved list view records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of saved list views to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Type of saved list views to fetch.",
                    "name": "view",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: name. Defaults to name",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/SavedListView"
                        }
                    }
                }
            }
        },
        "post": {
            "tags": [
                "Saved List Views"
            ],
                "summary": "Create a saved list view",
                "description": "Creates a saved list view.\n",
                "parameters": [
                {
                    "in": "formData",
                    "description": "The name of the saved list view",
                    "name": "name",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The type of objects in the saved list view.  Value must be one of: people, companies",
                    "name": "view",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether the saved list view is the default",
                    "name": "is_default",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "JSON object of list view parameters",
                    "name": "view_params",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/SavedListView"
                    }
                }
            }
        }
    },
    "/v2/saved_list_views/{id}.json": {
        "get": {
            "tags": [
                "Saved List Views"
            ],
                "summary": "Fetch a saved list view",
                "description": "Fetches a saved list view, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Saved List View ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/SavedListView"
                    }
                }
            }
        },
        "delete": {
            "tags": [
                "Saved List Views"
            ],
                "summary": "Delete a saved list view",
                "description": "Deletes a saved list view. This operation is not reversible without contacting support.\nThis operation can be called multiple times successfully.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Saved List View ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "204": {
                    "description": "The saved list view has been deleted successfully"
                }
            }
        },
        "put": {
            "tags": [
                "Saved List Views"
            ],
                "summary": "Update a saved list view",
                "description": "Updates a saved list view.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Saved List View ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "The name of the saved list view",
                    "name": "name",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "formData",
                    "description": "Whether the saved list view is the default",
                    "name": "is_default",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "formData",
                    "description": "JSON object of list view parameters",
                    "name": "view_params",
                    "required": false,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/SavedListView"
                    }
                }
            }
        }
    },
    "/v2/steps.json": {
        "get": {
            "tags": [
                "Steps"
            ],
                "summary": "List steps",
                "description": "Fetches multiple step records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of steps to fetch.",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filter by cadence ID",
                    "name": "cadence_id",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Filter by step type",
                    "name": "type",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Filter by whether a step has due actions",
                    "name": "has_due_actions",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Step"
                        }
                    }
                }
            }
        }
    },
    "/v2/steps/{id}.json": {
        "get": {
            "tags": [
                "Steps"
            ],
                "summary": "Fetch a step",
                "description": "Fetches a step, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Step ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/Step"
                    }
                }
            }
        }
    },
    "/v2/successes.json": {
        "get": {
            "tags": [
                "Successes"
            ],
                "summary": "List successes",
                "description": "Fetches multiple success records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of successes to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters successes by person_id. Multiple person ids can be applied",
                    "name": "person_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, succeeded_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Success"
                        }
                    }
                }
            }
        }
    },
    "/v2/tags.json": {
        "get": {
            "tags": [
                "Tags"
            ],
                "summary": "List team tags",
                "description": "Fetches a list of the tags used for a team. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n\nTags can be applied to mulitple resource types.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Filters tags by name",
                    "name": "search",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Filters tags by their IDs",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: name. Defaults to name",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                }
            }
        }
    },
    "/v2/team_template_attachments.json": {
        "get": {
            "tags": [
                "Team Template Attachments"
            ],
                "summary": "List team template attachments",
                "description": "Fetches multiple team template attachment records. The records can be filtered and paged according to\nthe respective parameters.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of team template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters template attachments by team template IDs",
                    "name": "team_template_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/TeamTemplateAttachment"
                        }
                    }
                }
            }
        }
    },
    "/v2/team_templates.json": {
        "get": {
            "tags": [
                "Team Templates"
            ],
                "summary": "List team templates",
                "description": "Fetches multiple team template records. The records can be filtered, paged, and sorted according to\nthe respective parameters.\n\nTeam templates are templates that are available team-wide. Admins may use\nteam templates to create original content for the entire team, monitor version control to ensure templates are always up to date,\nand track template performance across the entire organization. All metrics on a team template reflect usage across the team; individual metrics can be found with the email_templates API endpoint.\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "IDs of team templates to fetch. If a record can't be found, that record won't be returned and your request will be successful",
                    "name": "ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n",
                    "name": "updated_at",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates by title or subject",
                    "name": "search",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs",
                    "name": "tag_ids",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters team templates by tags applied to the template, not to exceed 100 tags",
                    "name": "tag",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters email templates to include archived templates or not",
                    "name": "include_archived_templates",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "in": "query",
                    "description": "Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at",
                    "name": "sort_by",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC",
                    "name": "sort_direction",
                    "required": false,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "How many records to show per page in the range [1, 100]. Defaults to 25",
                    "name": "per_page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "The current page to fetch results from. Defaults to 1",
                    "name": "page",
                    "required": false,
                    "type": "integer"
                },
                {
                    "in": "query",
                    "description": "Whether to include total_pages and total_count in the metadata. Defaults to false",
                    "name": "include_paging_counts",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/TeamTemplate"
                        }
                    }
                }
            }
        }
    },
    "/v2/team_templates/{id}.json": {
        "get": {
            "tags": [
                "Team Templates"
            ],
                "summary": "Fetch a team template",
                "description": "Fetches a team template, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "Team Template ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "query",
                    "description": "Optionally will return the templates with the current user's email signature",
                    "name": "include_signature",
                    "required": false,
                    "type": "boolean"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/TeamTemplate"
                    }
                }
            }
        }
    },
    "/v2/users.json": {
        "get": {
            "tags": [
                "Users"
            ],
                "summary": "List users",
                "description": "Non Admin: Lists only your user, or all on team depending on group visibility policy\nTeam Admin: Lists users associated with your team\n",
                "parameters": [
                {
                    "in": "query",
                    "description": "Filters list to only include guids",
                    "name": "guid",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "description": "Filters users by group_id",
                    "name": "group_id",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "type": "array",
                            "items": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        }
    },
    "/v2/users/{id}.json": {
        "get": {
            "tags": [
                "Users"
            ],
                "summary": "Fetch a user",
                "description": "Fetches a user, by ID only.\n",
                "parameters": [
                {
                    "in": "path",
                    "description": "User ID",
                    "name": "id",
                    "required": true,
                    "type": "string"
                }
            ],
                "responses": {
                "200": {
                    "description": "Success",
                        "schema": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    }
},
    "definitions": {
    "User": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "User ID",
                    "example": 1
            },
            "guid": {
                "type": "string",
                    "description": "Globally unique user ID. New endpoints will explicitly accept this over id",
                    "example": "9cc6da15-d403-4f5b-aeed-c4b8463cf9ae"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the user was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the user was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "name": {
                "type": "string",
                    "description": "Display name of user",
                    "example": "Benjamin Franklin"
            },
            "first_name": {
                "type": "string",
                    "description": "First name of user",
                    "example": "Benjamin"
            },
            "last_name": {
                "type": "string",
                    "description": "Last name of user",
                    "example": "Franklin"
            },
            "active": {
                "type": "boolean",
                    "description": "Whether an user is currently active in SalesLoft",
                    "example": true
            },
            "time_zone": {
                "type": "string",
                    "description": "User Time Zone",
                    "example": "US/Eastern"
            },
            "slack_username": {
                "type": "string",
                    "description": "Slack username",
                    "example": "benjamin-franklin"
            },
            "twitter_handle": {
                "type": "string",
                    "description": "Twitter handle",
                    "example": "@benjamin-franklin"
            },
            "email": {
                "type": "string",
                    "description": "Email address provided to accounts.salesloft.com",
                    "example": "fake@salesloft.com"
            },
            "email_client_email_address": {
                "type": "string",
                    "description": "Email address associated with the email client of the user",
                    "example": "fake@salesloft.com"
            },
            "sending_email_address": {
                "type": "string",
                    "description": "The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email",
                    "example": "fake@salesloft.com"
            },
            "from_address": {
                "type": "string",
                    "description": "The from address of this user",
                    "example": "fake@salesloft.com"
            },
            "full_email_address": {
                "type": "string",
                    "description": "RFC 5322 compliant email address",
                    "example": "\"Benjamin Franklin\" <Benjamin@salesloft.com>"
            },
            "bcc_email_address": {
                "type": "string",
                    "description": "Address that will be BBC'd on all emails from this user",
                    "example": "fake@salesloft.com"
            },
            "email_signature": {
                "type": "string",
                    "description": "Email signature",
                    "example": "Benjamin Franklin<div></div><div></div>"
            },
            "email_signature_type": {
                "type": "string",
                    "description": "Email signature type",
                    "example": "html"
            },
            "email_signature_click_tracking_disabled": {
                "type": "boolean",
                    "description": "Whether this user has click tracking disabled in email signature",
                    "example": false
            },
            "team_admin": {
                "type": "boolean",
                    "description": "Team Admin",
                    "example": true
            },
            "local_dial_enabled": {
                "type": "boolean",
                    "description": "Whether this user has Local Dial enabled",
                    "example": true
            },
            "click_to_call_enabled": {
                "type": "boolean",
                    "description": "Whether this user has click to call enabled",
                    "example": true
            },
            "email_client_configured": {
                "type": "boolean",
                    "description": "Whether this user has a email client configured",
                    "example": true
            },
            "crm_connected": {
                "type": "boolean",
                    "description": "Whether the user has a crm connected",
                    "example": true
            },
            "external_feature_flags": {
                "type": "object",
                    "description": "Feature flags that are for this user. New flags may appear or disappear at any time",
                    "example": {}
            },
            "phone_client": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Phone Client of user",
                    "example": {
                    "id": 1
                }
            },
            "phone_number_assignment": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Phone number assignment of user",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/phone_number_assignments/1"
                }
            },
            "group": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Group of user",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/groups/1"
                }
            },
            "team": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Team of user",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/team"
                }
            }
        }
    },
    "EmbeddedResource": {
        "properties": {
            "_href": {
                "type": "string",
                    "description": "Resource URL, pointed at your API version, present if this resource is available in the API",
                    "example": "https://api.salesloft.com/v2/widgets/10"
            },
            "id": {
                "type": "integer",
                    "description": "ID of the resource",
                    "example": 10
            }
        }
    },
    "Team": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "Team ID",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Team name",
                    "example": "The A-Team"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "group_privacy_setting": {
                "type": "string",
                    "description": "Visibility setting for resources across the team. Possible values are: group_public, all_public.\nWhen the value is group_public, certain resources will only be visible to members of the same group.\nWhen the value is all_public, all resources are visible to all users on this team.\n",
                    "example": "all_public"
            },
            "team_visibility_default": {
                "type": "string",
                    "description": "The default visibility of resources on the team, in the UI only. The API does not utilize this default.\nPossible values are: public, private.\n",
                    "example": "public"
            },
            "plan": {
                "type": "string",
                    "description": "Plan type of the team, Possible values are: group, professional, enterprise",
                    "example": "professional"
            },
            "license_limit": {
                "type": "integer",
                    "description": "Count of seats that this team has licensed",
                    "example": 100
            },
            "local_dial_enabled": {
                "type": "boolean",
                    "description": "Whether this team has local dial enabled",
                    "example": true
            },
            "record_by_default": {
                "type": "boolean",
                    "description": "Whether calls will record by default",
                    "example": true
            },
            "call_recording_disabled": {
                "type": "boolean",
                    "description": "Whether all call recording is disabled",
                    "example": false
            },
            "email_daily_limit": {
                "type": "integer",
                    "description": "Daily email limit for each member on the team",
                    "example": 1000
            },
            "click_tracking_default": {
                "type": "boolean",
                    "description": "The team default for click tracking when composing emails",
                    "example": true
            },
            "allow_automated_email_steps": {
                "type": "boolean",
                    "description": "Whether team members are allowed to have automated email steps",
                    "example": true
            },
            "custom_tracking_domain": {
                "type": "string",
                    "description": "The domain click and open tracking will be proxied through",
                    "example": "examplecompany.com"
            },
            "dispositions_required": {
                "type": "boolean",
                    "description": "Whether team members are required to mark disposition at the end of calls",
                    "example": false
            },
            "sentiments_required": {
                "type": "boolean",
                    "description": "Whether team members are required to log sentiments",
                    "example": false
            }
        }
    },
    "Account": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Account",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "archived_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account was archived, if archived",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "name": {
                "type": "string",
                    "description": "Account Full Name",
                    "example": "Hogwarts School of Witchcraft and Wizardry"
            },
            "domain": {
                "type": "string",
                    "description": "Website domain, not a fully qualified URI",
                    "example": "salesloft.com"
            },
            "conversational_name": {
                "type": "string",
                    "description": "Conversational name of the Account",
                    "example": "Hogwarts"
            },
            "description": {
                "type": "string",
                    "description": "Description",
                    "example": "British school of magic for students"
            },
            "phone": {
                "type": "string",
                    "description": "Phone number without formatting",
                    "example": "+1 444 555 6666"
            },
            "website": {
                "type": "string",
                    "description": "Website",
                    "example": "https://salesloft.com"
            },
            "linkedin_url": {
                "type": "string",
                    "description": "Full LinkedIn url",
                    "example": "https://www.linkedin.com/company/2296178/"
            },
            "twitter_handle": {
                "type": "string",
                    "description": "Twitter handle, with @",
                    "example": "@kyleporter"
            },
            "street": {
                "type": "string",
                    "description": "Street name and number",
                    "example": "4 Picket Drive"
            },
            "city": {
                "type": "string",
                    "description": "City",
                    "example": "Dufftown"
            },
            "state": {
                "type": "string",
                    "description": "State",
                    "example": "Mortlach"
            },
            "postal_code": {
                "type": "string",
                    "description": "Postal code",
                    "example": "55555"
            },
            "country": {
                "type": "string",
                    "description": "Country",
                    "example": "Scotland"
            },
            "locale": {
                "type": "string",
                    "description": "Time locale",
                    "example": "Europe/London"
            },
            "industry": {
                "type": "string",
                    "description": "Industry",
                    "example": "Education"
            },
            "company_type": {
                "type": "string",
                    "description": "Type of the Account's company",
                    "example": "Private"
            },
            "founded": {
                "type": "string",
                    "description": "Date or year of founding",
                    "example": "March 1st, 1820"
            },
            "revenue_range": {
                "type": "string",
                    "description": "Estimated revenue range",
                    "example": "1,000,000-2,000,000"
            },
            "size": {
                "type": "string",
                    "description": "Estimated number of people in employment",
                    "example": "1500"
            },
            "crm_id": {
                "type": "string",
                    "description": "CRM ID, currently Salesforce.com only",
                    "example": "003i000001mnhpD"
            },
            "crm_url": {
                "type": "string",
                    "description": "CRM url, currently Salesforce.com only",
                    "example": "https://na15.salesforce.com/003i000001mnhpD"
            },
            "crm_object_type": {
                "type": "string",
                    "description": "CRM object type, currently Salesforce.com only",
                    "example": "account"
            },
            "owner_crm_id": {
                "type": "string",
                    "description": "Mapped owner field from the CRM, currently Salesforce.com only",
                    "example": "003i000001mnhpD"
            },
            "last_contacted_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime this Account was last contacted",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_contacted_type": {
                "type": "string",
                    "description": "The type of the last touch to this Account. Can be call, email, other",
                    "example": "call"
            },
            "do_not_contact": {
                "type": "boolean",
                    "description": "Whether this company has opted out of communications. Do not contact someone at this company when this is set to true",
                    "example": true
            },
            "custom_fields": {
                "type": "object",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "example": {
                    "MyField": "A Value",
                        "Other": "Field"
                }
            },
            "tags": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "All tags applied to this Account",
                    "example": [
                    "7-23-2017",
                    "dreamforce"
                ]
            },
            "counts": {
                "$ref": "#/definitions/EmbeddedAccountCounts",
                    "description": "Various counts for this Account",
                    "example": {
                    "people": 15
                }
            },
            "owner": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that is marked as the owner of this Account",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "creator": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that created this Account",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "last_contacted_by": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that last contacted this Account",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "last_contacted_person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Person who was last contacted at this Account",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "company_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Company Stage that this Account has set. This is referred to as Account Stage in other parts of the API. When sorting by account_stage, the company stage's order is used",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/account_stages/1"
                }
            },
            "account_tier": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Account Tier that this Account has set",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/account_tiers/1"
                }
            }
        }
    },
    "EmbeddedAccountCounts": {
        "properties": {
            "people": {
                "type": "integer",
                    "description": "Number of people in SalesLoft associated with this Account",
                    "example": 15
            }
        }
    },
    "AccountStage": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Account Stage",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Name of Account Stage",
                    "example": "In Progress"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account Stage was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account Stage was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "order": {
                "type": "integer",
                    "description": "Order of Account Stage",
                    "example": 3
            }
        }
    },
    "AccountTier": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Account Tier",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Name of the Account Tier",
                    "example": "High Priority"
            },
            "order": {
                "type": "integer",
                    "description": "The order of the account tier",
                    "example": 2
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account Tier was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Account Tier was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            }
        }
    },
    "Action": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Action",
                    "example": 1
            },
            "due": {
                "type": "boolean",
                    "description": "Whether this step is due",
                    "example": true
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Action was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Action was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "type": {
                "type": "string",
                    "description": "The type of this action. Valid types are: email, phone, other. New types may be added in the future.\n",
                    "example": "phone"
            },
            "status": {
                "type": "string",
                    "description": "The current state of the person on the cadence. Possible values are:\n\nin_progress: this action has not been completed\n\npending_activity: this action has been acted upon, but the action has not been completed.\n(i.e. the email is scheduled to send, but has not been delivered yet)\n",
                    "example": "in_progress"
            },
            "due_on": {
                "type": "string",
                    "format": "date",
                    "description": "When action is due",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "action_details": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The type specific action details",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/action_details/call_instructions/1"
                }
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User assigned to action",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The subject of an action",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            }
        }
    },
    "CallInstruction": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of call instructions",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call instructions were created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call instructions were last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "instructions": {
                "type": "string",
                    "description": "The instructions",
                    "example": "Call once, leave voicemail if not answered. Conference conversation."
            }
        }
    },
    "Activity": {
        "properties": {
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Activity was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            }
        }
    },
    "Cadence": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of cadence",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the cadence was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the cadence was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "archived_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the cadence was archived, if archived",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "team_cadence": {
                "type": "boolean",
                    "description": "Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users",
                    "example": false
            },
            "shared": {
                "type": "boolean",
                    "description": "Whether this cadence is visible to team members (shared)",
                    "example": false
            },
            "remove_bounces_enabled": {
                "type": "boolean",
                    "description": "Whether this cadence is configured to automatically remove people who have bounced",
                    "example": true
            },
            "remove_replies_enabled": {
                "type": "boolean",
                    "description": "Whether this cadence is configured to automatically remove people who have replied",
                    "example": true
            },
            "opt_out_link_included": {
                "type": "boolean",
                    "description": "Whether this cadence is configured to include an opt-out link by default",
                    "example": true
            },
            "name": {
                "type": "string",
                    "description": "Cadence name",
                    "example": "Prospecting - VP of Sales"
            },
            "tags": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "All tags applied to this cadence",
                    "example": [
                    "7-23-2017",
                    "dreamforce"
                ]
            },
            "creator": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that created this cadence",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "owner": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that is marked as the owner of this cadence",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "bounced_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Stage set when person on cadence bounces",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/person_stages/1"
                }
            },
            "replied_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Stage set when person on cadence replies",
                    "example": {
                    "id": 2,
                        "_href": "https://api.salesloft.com/v2/person_stages/2"
                }
            },
            "added_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Stage set when person is added to cadence",
                    "example": {
                    "id": 3,
                        "_href": "https://api.salesloft.com/v2/person_stages/3"
                }
            },
            "finished_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Stage set when person is finished with cadence",
                    "example": {
                    "id": 3,
                        "_href": "https://api.salesloft.com/v2/person_stages/3"
                }
            },
            "counts": {
                "$ref": "#/definitions/CadenceCounts",
                    "description": "Various counts for this cadence",
                    "example": {
                    "cadence_people": 59,
                        "target_daily_people": 10
                }
            }
        }
    },
    "CadenceCounts": {
        "properties": {
            "cadence_people": {
                "type": "integer",
                    "description": "The number of people that have ever been added to the cadence",
                    "example": 59
            },
            "target_daily_people": {
                "type": "integer",
                    "description": "The user defined target for number of people to add to the cadence each day",
                    "example": 10
            }
        }
    },
    "CadenceMembership": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "Cadence membership ID",
                    "example": 1
            },
            "added_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the person was last added to this cadence",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the person was first added to this cadence",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the record was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "person_deleted": {
                "type": "boolean",
                    "description": "Whether the associated person has since been deleted",
                    "example": false
            },
            "currently_on_cadence": {
                "type": "boolean",
                    "description": "Whether the person is currently on the cadence",
                    "example": false
            },
            "current_state": {
                "type": "string",
                    "description": "The current state of the person on the cadence. Possible values are:\n\nprocessing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time\n\nstaged: The person is waiting for the first step in the cadence to occur\n\nactive: The cadence has begun processing this person and is still in the process, but idle\n\nscheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur\n\ncompleted: The cadence has been completed for this person\n\nremoved: The person was manually or automatically removed from the cadence\n\nremoved_no_action: The person was removed from the cadence before any action occurred\n\nreassigned: The person's cadence execution was transferred to a different user, ending this user's interaction\n",
                    "example": "staged"
            },
            "cadence": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The cadence that the person is on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/cadences/1"
                }
            },
            "person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person that is on the cadence",
                    "example": {
                    "id": 2,
                        "_href": "https://api.salesloft.com/v2/people/2"
                }
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The user that is acting on the person in the cadence",
                    "example": {
                    "id": 3,
                        "_href": "https://api.salesloft.com/v2/users/3"
                }
            },
            "latest_action": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The most recent action associated with the record",
                    "example": {
                    "id": 4
                }
            },
            "counts": {
                "$ref": "#/definitions/CadenceMembershipCounts",
                    "description": "Various counts for the record",
                    "example": {
                    "views": 10,
                        "clicks": 5,
                        "replies": 2,
                        "calls": 2,
                        "sent_emails": 4,
                        "bounces": 0
                }
            }
        }
    },
    "CadenceMembershipCounts": {
        "properties": {
            "views": {
                "type": "integer",
                    "description": "The number of times emails sent from the cadence to the person were opened",
                    "example": 10
            },
            "clicks": {
                "type": "integer",
                    "description": "The number of times emails sent from the cadence to the person were clicked",
                    "example": 5
            },
            "replies": {
                "type": "integer",
                    "description": "The number of times emails sent from the cadence to the person were replied to",
                    "example": 2
            },
            "calls": {
                "type": "integer",
                    "description": "The number of times a call was logged from the cadence to the person",
                    "example": 2
            },
            "sent_emails": {
                "type": "integer",
                    "description": "The number of times emails were sent from the cadence to the person",
                    "example": 4
            },
            "bounces": {
                "type": "integer",
                    "description": "The number of times emails sent from the cadence to the person bounced",
                    "example": 0
            }
        }
    },
    "CallDataRecord": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of CallDataRecord",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "to": {
                "type": "string",
                    "description": "Phone number that received the call",
                    "example": "7705551234"
            },
            "from": {
                "type": "string",
                    "description": "Phone number that placed the call",
                    "example": "7705551234"
            },
            "duration": {
                "type": "integer",
                    "description": "Length of the call in seconds",
                    "example": 60
            },
            "direction": {
                "type": "string",
                    "description": "Direction of the call. Can be one of: inbound, outbound",
                    "example": "outbound"
            },
            "status": {
                "type": "string",
                    "description": "The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed",
                    "example": "completed"
            },
            "call_type": {
                "type": "string",
                    "description": "Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time",
                    "example": "call"
            },
            "call_uuid": {
                "type": "string",
                    "description": "UUID of the call. Legs of the same call will have the same call_uuid.",
                    "example": "5c5c1f32-bff1-4b7c-8f2a-bd650b829c67"
            },
            "recording": {
                "$ref": "#/definitions/EmbeddedRecordingResource",
                    "description": "The recording for this this call data record, with a status",
                    "example": {
                    "url": "http://example.com/recording/1",
                        "status": "completed",
                        "recording_status": "completed"
                }
            },
            "call": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Call that this record was logged to, if logged to a call",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/activities/calls/1"
                }
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that made or received the call, if the call was to a user",
                    "example": {
                    "id": 2,
                        "_href": "https://api.salesloft.com/v2/users/2"
                }
            },
            "called_person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person called",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            }
        }
    },
    "EmbeddedRecordingResource": {
        "properties": {
            "url": {
                "type": "string",
                    "description": "The url of the recording",
                    "example": "http://example.com/recording/1"
            },
            "status": {
                "type": "string",
                    "description": "The status of the call that produced this recording. Possible values are (but not limited to):\n\nno-answer: The call was not answered\n\nfailed: The call was not able to be placed\n\nbusy: The call was busy\n\nringing: The call is ringing\n\nin-progress: The call is ongoing\n\ncompleted: The call is finished\n",
                    "example": "completed"
            },
            "recording_status": {
                "type": "string",
                    "description": "The processing status of the recording. Possible values are (but not limited to):\n\nnot_recorded: there is no recording available, and there will not be one becoming available\n\npending: the recording is currently being processed by the system\n\nprocessing: the recording is currently being processed by the system\n\ncompleted: the recording processing has been completed\n",
                    "example": "completed"
            }
        }
    },
    "CallDisposition": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of CallDisposition",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call disposition was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call disposition was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "name": {
                "type": "string",
                    "description": "An available call disposition text",
                    "example": "Connected"
            }
        }
    },
    "Call": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Call",
                    "example": 1
            },
            "to": {
                "type": "string",
                    "description": "Phone number that received the call",
                    "example": "7705551234"
            },
            "duration": {
                "type": "integer",
                    "description": "Length of the call in seconds",
                    "example": 60
            },
            "sentiment": {
                "type": "string",
                    "description": "Outcome of the conversation",
                    "example": "Demo Scheduled"
            },
            "disposition": {
                "type": "string",
                    "description": "Result of the call",
                    "example": "Connected"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "recordings": {
                "type": "array",
                    "items": {
                    "$ref": "#/definitions/EmbeddedRecordingResource"
                },
                "description": "The recordings for this this call and their status",
                    "example": [
                    {
                        "url": "https://example.com/recording1",
                        "recording_status": "completed",
                        "status": "completed"
                    }
                ]
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that made the call",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "action": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Action associated to the call",
                    "example": {
                    "id": 1
                }
            },
            "called_person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person called",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "crm_activity": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "CRM Activity associated with the call",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/crm_activities/1"
                }
            },
            "note": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Note for this call",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/notes/1"
                }
            },
            "cadence": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Cadence the call was made on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/cadences/1"
                }
            },
            "step": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Step the call was made on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/steps/1"
                }
            }
        }
    },
    "CallSentiment": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of CallSentiment",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call sentiment was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the call sentiment was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "name": {
                "type": "string",
                    "description": "An available call sentiment text",
                    "example": "Interested"
            }
        }
    },
    "CallerId": {
        "properties": {
            "display_name": {
                "type": "string",
                    "description": "The name of the person calling",
                    "example": "Frank Galikanokus"
            },
            "title": {
                "type": "string",
                    "description": "The title of the person calling",
                    "example": "Transportation Coordinator"
            },
            "account_name": {
                "type": "string",
                    "description": "The account of the person calling",
                    "example": "Bunty Soap Company"
            },
            "person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person calling",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            }
        }
    },
    "CrmActivityField": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of CrmActivityField",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the CrmActivityField was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the CrmActivityField was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "title": {
                "type": "string",
                    "description": "A human friendly title for this field",
                    "example": "Field Name"
            },
            "salesforce_object_type": {
                "type": "string",
                    "description": "The Salesforce object type that this field maps to. Valid object types are: Task.\nMore object types may be added in the future.\n",
                    "example": "Task"
            },
            "source": {
                "type": "string",
                    "description": "SalesLoft object that this field is mapped for. Valid sources are: email, phone",
                    "example": "phone"
            },
            "field": {
                "type": "string",
                    "description": "The Salesforce field name",
                    "example": "orgName__Field_Name__c"
            },
            "field_type": {
                "type": "string",
                    "description": "The type of this field in Salesforce. Certain field types can only accept structured input.",
                    "example": "boolean"
            },
            "value": {
                "type": "string",
                    "description": "A value to always be written. This value does not need to be sent to other endpoints' crm params,\nbut must be the exact value if sent. Email source fields will always have a value present.\n"
            },
            "picklist_values": {
                "type": "object",
                    "description": "Valid picklist values, if present for this field. The format is {label => value}. If present, only\nvalues in the picklist structure can be used as a crm param.\n",
                    "example": {
                    "High": "High",
                        "Low": "Low"
                }
            }
        }
    },
    "CrmActivity": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "CrmActivity ID",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the crm activity was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the crm activity was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "subject": {
                "type": "string",
                    "description": "The subject field of the activity in Salesforce",
                    "example": "Call: Connected | Interested"
            },
            "description": {
                "type": "string",
                    "description": "The description field of the activity in Salesforce",
                    "example": "Timeline is 2 weeks for demo, set with Kate"
            },
            "crm_id": {
                "type": "string",
                    "description": "The ID of the activity in Salesforce, if written to Salesforce",
                    "example": "00T0H00003w2FBhUAM"
            },
            "activity_type": {
                "type": "string",
                    "description": "The type of activity that is being recorded, if available. The values can change over time, but could be one of: email, phone, email reminder, inmail",
                    "example": "phone"
            },
            "error": {
                "type": "string",
                    "description": "Information about why this crm activity failed to sync, if it did fail to sync. Failed activities will be automatically retried and may become successful in the future"
            },
            "custom_crm_fields": {
                "type": "object",
                    "description": "Additional fields that are logged to Salesforce, if mapped by the team at the time of writing to Salesforce",
                    "example": {
                    "ecorp__Call_Type__c": "inbound follow up"
                }
            },
            "person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Person that this crm activity is for",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that triggered this crm activity",
                    "example": {
                    "id": 2,
                        "_href": "https://api.salesloft.com/v2/users/2"
                }
            }
        }
    },
    "CustomField": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Custom Field",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Name of the Custom Field",
                    "example": "My Custom Field"
            },
            "field_type": {
                "type": "string",
                    "description": "Type of the Custom Field. Value must be one of: person, company, opportunity.",
                    "example": "person"
            },
            "value_type": {
                "type": "string",
                    "description": "Value Type of the Custom Field. Value must be one of: text, date.",
                    "example": "text"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Custom Field was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Custom Field was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            }
        }
    },
    "Email": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Email",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "recipient_email_address": {
                "type": "string",
                    "description": "Email address of the recipient",
                    "example": "bob.smith@example.com"
            },
            "status": {
                "type": "string",
                    "description": "Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external",
                    "example": "sent"
            },
            "bounced": {
                "type": "boolean",
                    "description": "Whether this email bounced",
                    "example": false
            },
            "send_after": {
                "type": "string",
                    "format": "date",
                    "description": "When this email will be sent, or null if already sent",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "sent_at": {
                "type": "string",
                    "format": "date",
                    "description": "When this email was sent, or null if it was not sent",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "view_tracking": {
                "type": "boolean",
                    "description": "Whether this email had view tracking enabled",
                    "example": true
            },
            "click_tracking": {
                "type": "boolean",
                    "description": "Whether this email had click tracking enabled",
                    "example": true
            },
            "headers": {
                "type": "object",
                    "description": "Selected headers that are included if this email used them. Available keys are: cc, bcc",
                    "example": {
                    "cc": "sb@salesloft.com",
                        "bcc": "track@salesforce.com"
                }
            },
            "counts": {
                "$ref": "#/definitions/EmailCounts",
                    "description": "Various counts for this email",
                    "example": {
                    "clicks": 2,
                        "views": 3,
                        "replies": 1,
                        "unique_devices": 4,
                        "unique_locations": 3,
                        "attachments": 0
                }
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that sent this email",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "recipient": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person whom received this email",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "mailing": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The mailing that this email was a part of",
                    "example": {
                    "id": 1
                }
            },
            "action": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Action that this email was sent from, or null if not sent through a cadence",
                    "example": {
                    "id": 1
                }
            },
            "crm_activity": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "CRM Activity associated with this email",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/crm_activities/1"
                }
            },
            "cadence": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Cadence the email was sent on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/cadences/1"
                }
            },
            "step": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Step the email was sent on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/steps/1"
                }
            }
        }
    },
    "EmailCounts": {
        "properties": {
            "clicks": {
                "type": "integer",
                    "description": "The number of times links in the email were clicked",
                    "example": 2
            },
            "views": {
                "type": "integer",
                    "description": "The number of times the email was opened",
                    "example": 3
            },
            "replies": {
                "type": "integer",
                    "description": "The number of replies the email received",
                    "example": 1
            },
            "unique_devices": {
                "type": "integer",
                    "description": "The number of unique devices that opened the email",
                    "example": 4
            },
            "unique_locations": {
                "type": "integer",
                    "description": "The number of unique locations that opened the email",
                    "example": 3
            },
            "attachments": {
                "type": "integer",
                    "description": "The number of attachments on the email",
                    "example": 0
            }
        }
    },
    "EmailTemplateAttachment": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of email template attachment association",
                    "example": 5
            },
            "attachment_id": {
                "type": "integer",
                    "description": "ID of the email template attachment",
                    "example": 10
            },
            "email_template": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Link and id of specific email template",
                    "example": {
                    "id": 42,
                        "_href": "https://api.salesloft.com/v2/email_templates/42"
                }
            },
            "name": {
                "type": "string",
                    "description": "Name of the attachment",
                    "example": "example_attachment.gif"
            },
            "download_url": {
                "type": "string",
                    "description": "Download url of the attachment",
                    "example": "https://path/to/example_attachment.gif"
            },
            "attachment_file_size": {
                "type": "integer",
                    "description": "The size of the attachment",
                    "example": 2
            }
        }
    },
    "EmailTemplate": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of email template",
                    "example": 5
            },
            "title": {
                "type": "string",
                    "description": "Title of the email template",
                    "example": "Welcome email"
            },
            "subject": {
                "type": "string",
                    "description": "Subject of the email template",
                    "example": "Welcome to SalesLoft!"
            },
            "body": {
                "type": "string",
                    "description": "Sanitized body of the email template without email signature",
                    "example": "<div><div>Welcome to the SalesLoft family! My name is Sarah and I’m your implementation consultant. I’m here to get you up and running. It's my job to help you configure your team's SalesLoft access, provide customized training for your specific goals, and make sure that you and your team are ready to crush your goals.</div><div dir=\"ltr\"><br></div>Thank you,<br></div>"
            },
            "body_preview": {
                "type": "string",
                    "description": "A plain text version of the first 100 characters of the body of the email template",
                    "example": "hello\n\nhey sounds good\n\nok\n\nok\n\nwith an edit\n\nok now i'm comic sans 14"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email template was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email template was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_used_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email template was last used",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "archived_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the email template was archived, if archived",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "shared": {
                "type": "boolean",
                    "description": "Whether this email template is visible to team members (shared)",
                    "example": false
            },
            "open_tracking_enabled": {
                "type": "boolean",
                    "description": "Whether open tracking is enabled for this email template",
                    "example": true
            },
            "click_tracking_enabled": {
                "type": "boolean",
                    "description": "Whether click tracking is enabled for this email template",
                    "example": true
            },
            "cadence_template": {
                "type": "boolean",
                    "description": "Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.",
                    "example": true
            },
            "counts": {
                "$ref": "#/definitions/EmailTemplateCounts",
                    "description": "Various counts for this team template",
                    "example": {
                    "sent_emails": 59,
                        "views": 3,
                        "clicks": 20,
                        "replies": 1,
                        "bounces": 10
                }
            },
            "template_owner": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that owns this email template",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "team_template": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Associated team template, if any",
                    "example": {
                    "id": "00000000-0000-0000-0000-000000000000",
                        "_href": "https://api.salesloft.com/v2/team_templates/00000000-0000-0000-0000-000000000000"
                }
            },
            "_links": {
                "type": "object",
                    "description": "Links to attachments and tags resources for this email template.",
                    "example": {
                    "attachments": "https://api.salesloft.com/v2/email_template_attachments?email_template_id[]=1"
                }
            },
            "tags": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "All tags applied to this email template",
                    "example": [
                    "7-23-2017",
                    "internal"
                ]
            },
            "groups": {
                "type": "array",
                    "items": {
                    "$ref": "#/definitions/EmbeddedResource"
                },
                "description": "Groups to which this template is assigned, if any",
                    "example": {
                    "id": 921,
                        "_href": "https://api.salesloft.com/v2/groups/921"
                }
            }
        }
    },
    "EmailTemplateCounts": {
        "properties": {
            "sent_emails": {
                "type": "integer",
                    "description": "The number of times the email template was sent out",
                    "example": 59
            },
            "views": {
                "type": "integer",
                    "description": "The number of times the email template was opened",
                    "example": 3
            },
            "clicks": {
                "type": "integer",
                    "description": "The number of times links in the email template were clicked",
                    "example": 20
            },
            "replies": {
                "type": "integer",
                    "description": "The number of replies the email template received",
                    "example": 1
            },
            "bounces": {
                "type": "integer",
                    "description": "The number of bounces the email template received",
                    "example": 10
            }
        }
    },
    "Import": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "Import ID",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the import was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the import was last updated, ignoring relationship changes",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "name": {
                "type": "string",
                    "description": "Name of Import",
                    "example": "DataProvider -> SalesLoft 9/1/17"
            },
            "current_people_count": {
                "type": "integer",
                    "description": "Count of People that have not been deleted",
                    "example": 5
            },
            "imported_people_count": {
                "type": "integer",
                    "description": "Count of People that have ever been on this Import",
                    "example": 7
            }
        }
    },
    "LiveWebsiteTrackingParameter": {
        "properties": {
            "parameters": {
                "type": "array",
                    "items": {
                    "type": "object"
                },
                "description": "A SalesLoft identifier",
                    "example": [
                    {
                        "name": "sbrc",
                        "value": "tracking parameter"
                    }
                ]
            }
        }
    },
    "Note": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "Note ID",
                    "example": 1
            },
            "content": {
                "type": "string",
                    "description": "The content of the note",
                    "example": "Was very interested in a demo at a later time"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the note was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the note was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that wrote this note",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "associated_with": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Item on which the note was made",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "call": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Call linked to the note",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/activities/calls/1"
                }
            }
        }
    },
    "Person": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "Person ID",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the person was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the person was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_contacted_at": {
                "type": "string",
                    "format": "date",
                    "description": "Last datetime this person was contacted",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_replied_at": {
                "type": "string",
                    "format": "date",
                    "description": "Last datetime this person replied to an email",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "first_name": {
                "type": "string",
                    "description": "First name",
                    "example": "Pat"
            },
            "last_name": {
                "type": "string",
                    "description": "Last name",
                    "example": "Johnson"
            },
            "display_name": {
                "type": "string",
                    "description": "Either the full name or the email address. Use this when showing a person's name",
                    "example": "Pat Johnson"
            },
            "email_address": {
                "type": "string",
                    "description": "Email address",
                    "example": "pat.johnson@example.com"
            },
            "secondary_email_address": {
                "type": "string",
                    "description": "Alternate email address",
                    "example": "pat.johnson@example.com"
            },
            "personal_email_address": {
                "type": "string",
                    "description": "Personal email address",
                    "example": "pat.johnson@example.com"
            },
            "phone": {
                "type": "string",
                    "description": "Phone without formatting",
                    "example": "+1 444 555 6666"
            },
            "phone_extension": {
                "type": "string",
                    "description": "Phone extension without formatting",
                    "example": "x123"
            },
            "home_phone": {
                "type": "string",
                    "description": "Home phone without formatting",
                    "example": "+1 444 555 6666"
            },
            "mobile_phone": {
                "type": "string",
                    "description": "Mobile phone without formatting",
                    "example": "+1 444 555 6666"
            },
            "linkedin_url": {
                "type": "string",
                    "description": "Linkedin URL",
                    "example": "https://www.linkedin.com/in/username"
            },
            "title": {
                "type": "string",
                    "description": "Job title",
                    "example": "Sales Development Representative"
            },
            "city": {
                "type": "string",
                    "description": "City",
                    "example": "Atlanta"
            },
            "state": {
                "type": "string",
                    "description": "State",
                    "example": "Georgia"
            },
            "country": {
                "type": "string",
                    "description": "Country",
                    "example": "United States"
            },
            "work_city": {
                "type": "string",
                    "description": "Work location - city",
                    "example": "Atlanta"
            },
            "work_state": {
                "type": "string",
                    "description": "Work location - state",
                    "example": "Georgia"
            },
            "work_country": {
                "type": "string",
                    "description": "Work location - country",
                    "example": "United States"
            },
            "crm_url": {
                "type": "string",
                    "description": "CRM url, currently Salesforce.com only",
                    "example": "https://na15.salesforce.com/003i000001mnhpD"
            },
            "crm_id": {
                "type": "string",
                    "description": "CRM ID, currently Salesforce.com only",
                    "example": "003i000001mnhpD"
            },
            "crm_object_type": {
                "type": "string",
                    "description": "CRM object type, currently Salesforce.com only",
                    "example": "Lead"
            },
            "owner_crm_id": {
                "type": "string",
                    "description": "Mapped owner field from the CRM, currently Salesforce.com only",
                    "example": "003i000001mnhpD"
            },
            "person_company_name": {
                "type": "string",
                    "description": "Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "example": "SalesLoft"
            },
            "person_company_website": {
                "type": "string",
                    "description": "Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "example": "https://salesloft.com"
            },
            "person_company_industry": {
                "type": "string",
                    "description": "Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended",
                    "example": "Information Technology"
            },
            "do_not_contact": {
                "type": "boolean",
                    "description": "Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.",
                    "example": true
            },
            "bouncing": {
                "type": "boolean",
                    "description": "Whether this person's current email address has bounced",
                    "example": false
            },
            "locale": {
                "type": "string",
                    "description": "Time locale of the person",
                    "example": "US/Eastern"
            },
            "personal_website": {
                "type": "string",
                    "description": "The website of this person",
                    "example": "https://salesloft.com"
            },
            "twitter_handle": {
                "type": "string",
                    "description": "The twitter handle of this person",
                    "example": "@kyleporter"
            },
            "last_contacted_type": {
                "type": "string",
                    "description": "The type of the last touch to this person. Can be call, email, other",
                    "example": "call"
            },
            "job_seniority": {
                "type": "string",
                    "description": "The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown",
                    "example": "vice_president"
            },
            "custom_fields": {
                "type": "object",
                    "description": "Custom fields are defined by the user's team. Only fields with values are presented in the API.",
                    "example": {
                    "MyField": "A Value",
                        "Other": "Field"
                }
            },
            "tags": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "All tags applied to this person",
                    "example": [
                    "7-23-2017",
                    "dreamforce"
                ]
            },
            "contact_restrictions": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message",
                    "example": [
                    "call",
                    "email",
                    "message"
                ]
            },
            "counts": {
                "$ref": "#/definitions/PersonCounts",
                    "description": "Various counts for this person",
                    "example": {
                    "emails_sent": 3,
                        "emails_viewed": 2,
                        "emails_clicked": 1,
                        "emails_replied_to": 0,
                        "emails_bounced": 0,
                        "calls": 4
                }
            },
            "account": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Account that this person is associated to",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/accounts/1"
                }
            },
            "owner": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that is marked as the owner of this person",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "last_contacted_by": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that last contacted this person",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "import": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Import that this person was a part of",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/imports/1"
                }
            },
            "person_stage": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Person stage that this person has set",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/person_stages/1"
                }
            }
        }
    },
    "PersonCounts": {
        "properties": {
            "emails_sent": {
                "type": "integer",
                    "description": "The number of emails sent to this person",
                    "example": 3
            },
            "emails_viewed": {
                "type": "integer",
                    "description": "The number of unique emails viewed by this person",
                    "example": 2
            },
            "emails_clicked": {
                "type": "integer",
                    "description": "The number of unique emails clicked by this person",
                    "example": 1
            },
            "emails_replied_to": {
                "type": "integer",
                    "description": "The number of unique emails replied to by this person",
                    "example": 0
            },
            "emails_bounced": {
                "type": "integer",
                    "description": "The number of unique emails sent to this person that bounced",
                    "example": 0
            },
            "calls": {
                "type": "integer",
                    "description": "The number of calls logged to this person",
                    "example": 4
            }
        }
    },
    "PersonStage": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Person Stage",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Name of Person Stage",
                    "example": "Entry Stage"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Person Stage was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Person Stage was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            }
        }
    },
    "PhoneNumberAssignment": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "PhoneNumberAssignment ID",
                    "example": 1
            },
            "number": {
                "type": "string",
                    "description": "The phone number associated with this assignment",
                    "example": "+12223334444"
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User associated with this phone number assignment",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            }
        }
    },
    "RecordingSetting": {
        "properties": {
            "recording_default": {
                "type": "boolean",
                    "description": "Whether this phone number should record by default",
                    "example": true
            }
        }
    },
    "SavedListView": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Ssaved list view",
                    "example": 1
            },
            "view": {
                "type": "string",
                    "description": "Type of saved list view",
                    "example": "companies"
            },
            "name": {
                "type": "string",
                    "description": "Name of saved list view",
                    "example": "Tom's Prospects"
            },
            "view_params": {
                "type": "object",
                    "description": "List of set filters in saved list view",
                    "example": "{'owner':'unowned','stage':'28865','unowned':true}"
            },
            "is_default": {
                "type": "boolean",
                    "description": "Whether the saved list view is the default view",
                    "example": "true"
            }
        }
    },
    "Step": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Step",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Step was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the Step was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "disabled": {
                "type": "boolean",
                    "description": "Whether this step is currently active",
                    "example": true
            },
            "type": {
                "type": "string",
                    "description": "The type of the action scheduled by this step. Valid types are: email, phone, integration, other. New types may be added in the future.\n",
                    "example": "phone"
            },
            "display_name": {
                "type": "string",
                    "description": "Display name of the step",
                    "example": "Day 1: Step 2 - Phone"
            },
            "day": {
                "type": "integer",
                    "description": "Day this step is associated with up",
                    "example": 1
            },
            "step_number": {
                "type": "integer",
                    "description": "The number of the step for this day",
                    "example": 1
            },
            "details": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Details pertaining to the specific step type",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/action_details/call_instructions/1"
                }
            },
            "cadence": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The cadence of the step",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/cadences/1"
                }
            }
        }
    },
    "Success": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of success",
                    "example": 1
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the success was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the success was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "succeeded_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the success was recorded",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "success_window_started_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when this person was first worked, leading up to the success",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that created this success",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "person": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The person who a success occurred on",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/people/1"
                }
            },
            "latest_email": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The email that was most recently sent to this person before the success",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/activities/emails/1"
                }
            },
            "latest_call": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The call that was most recently made to this person before the success",
                    "example": {
                    "id": 2,
                        "_href": "https://api.salesloft.com/v2/activities/calls/2"
                }
            },
            "latest_action": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The action that was most recently completed on this person before the success",
                    "example": {
                    "id": 3
                }
            },
            "latest_cadence": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "The cadence with the action that was most recently completed on this person before the success",
                    "example": {
                    "id": 4,
                        "_href": "https://api.salesloft.com/v2/cadences/4"
                }
            },
            "counts": {
                "$ref": "#/definitions/SuccessCounts",
                    "description": "Various counts for this success",
                    "example": {
                    "total_emails": 2,
                        "total_calls": 5,
                        "total_other_touches": 3
                }
            }
        }
    },
    "SuccessCounts": {
        "properties": {
            "total_emails": {
                "type": "integer",
                    "description": "The total number of emails made in this success window",
                    "example": 2
            },
            "total_calls": {
                "type": "integer",
                    "description": "The total number of calls made in this success window",
                    "example": 5
            },
            "total_other_touches": {
                "type": "integer",
                    "description": "The total number of other touches made in this success window",
                    "example": 3
            }
        }
    },
    "Tag": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of Tag",
                    "example": 1
            },
            "name": {
                "type": "string",
                    "description": "Name of the tag",
                    "example": "marketing"
            }
        }
    },
    "TeamTemplateAttachment": {
        "properties": {
            "id": {
                "type": "integer",
                    "description": "ID of team template attachment association",
                    "example": 5
            },
            "attachment_id": {
                "type": "integer",
                    "description": "ID of the team template attachment"
            },
            "team_template": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "Details pertaining to the specific team template",
                    "example": {
                    "id": 21,
                        "_href": "https://api.salesloft.com/v2/team_templates/21"
                }
            },
            "name": {
                "type": "string",
                    "description": "Name of the attachment",
                    "example": "example_attachment.gif"
            },
            "download_url": {
                "type": "string",
                    "description": "Download url of the attachment",
                    "example": "https://path/to/example_attachment.gif"
            },
            "attachment_file_size": {
                "type": "integer",
                    "description": "The size of the attachment",
                    "example": 2
            }
        }
    },
    "TeamTemplate": {
        "properties": {
            "id": {
                "type": "string",
                    "description": "ID of team template",
                    "example": "51226150-3108-4dea-883b-0c0d7388f456"
            },
            "title": {
                "type": "string",
                    "description": "Title of the team template",
                    "example": "VP Breakup Email"
            },
            "subject": {
                "type": "string",
                    "description": "Subject of the team template",
                    "example": "It’s time to say goodbye"
            },
            "body": {
                "type": "string",
                    "description": "Body of the team template",
                    "example": "<div>Do you know about birds?</div><div>You can find them here: <a href=\"https://www.allaboutbirds.org/guide/search/\" target=\"_blank\">https://www.allaboutbirds.org/guide/search/</a></div>"
            },
            "body_preview": {
                "type": "string",
                    "description": "A plain text version of the first 100 characters of the body of the team template",
                    "example": "hello\n\nhey sounds good\n\nok\n\nok\n\nwith an edit\n\nok now i'm comic sans 14"
            },
            "created_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team template was created",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "updated_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team template was last updated",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_used_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team template was last used",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "archived_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team template was archived, if archived",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "last_modified_at": {
                "type": "string",
                    "format": "date",
                    "description": "Datetime of when the team template was last modified",
                    "example": "2019-01-01T00:00:00.000000-05:00"
            },
            "open_tracking_enabled": {
                "type": "boolean",
                    "description": "Whether open tracking is enabled for this team template",
                    "example": true
            },
            "click_tracking_enabled": {
                "type": "boolean",
                    "description": "Whether click tracking is enabled for this team template",
                    "example": true
            },
            "counts": {
                "$ref": "#/definitions/TeamTemplateCounts",
                    "description": "Various counts for this team template. Counts will update over time but will not affect the 'updated at' field for the team template.",
                    "example": {
                    "sent_emails": 59,
                        "views": 3,
                        "clicks": 20,
                        "replies": 1,
                        "bounces": 10
                }
            },
            "last_modified_user": {
                "$ref": "#/definitions/EmbeddedResource",
                    "description": "User that last modified this team template",
                    "example": {
                    "id": 1,
                        "_href": "https://api.salesloft.com/v2/users/1"
                }
            },
            "_links": {
                "type": "object",
                    "description": "Links to attachments resource for this template ",
                    "example": {
                    "attachments": "https://api.salesloft.com/v2/team_template_attachments?team_template_id[]=1"
                }
            },
            "tags": {
                "type": "array",
                    "items": {
                    "type": "string"
                },
                "description": "All tags applied to this team template",
                    "example": [
                    "7-23-2017",
                    "internal"
                ]
            }
        }
    },
    "TeamTemplateCounts": {
        "properties": {
            "sent_emails": {
                "type": "integer",
                    "description": "The number of times the team template was sent out",
                    "example": 59
            },
            "views": {
                "type": "integer",
                    "description": "The number of times the team template was opened",
                    "example": 3
            },
            "clicks": {
                "type": "integer",
                    "description": "The number of times links in the team template were clicked",
                    "example": 20
            },
            "replies": {
                "type": "integer",
                    "description": "The number of replies the team template received",
                    "example": 1
            },
            "bounces": {
                "type": "integer",
                    "description": "The number of bounces the team template received",
                    "example": 10
            }
        }
    }
},
    "host": "api.salesloft.com",
    "schemes": [
    "https"
],
    "securityDefinitions": {
    "OAuth2": {
        "type": "oauth2",
            "flow": "application",
            "authorizationUrl": "https://accounts.salesloft.com/oauth/authorize",
            "tokenUrl": "https://accounts.salesloft.com/oauth/token"
    }
}
}
